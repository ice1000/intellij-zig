/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.ziglang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.ziglang.psi.ZigTypes;
import org.ziglang.ZigTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/linux_china/IdeaProjects/intellij-zig/grammar/zig-lexer.flex</tt>
 */
class ZigLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_AT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\4\3\1\22\0\1\1\1\37\1\24\2\0\1\33\1\40\1\26\1\46\1\47\1\34\1\32"+
    "\1\44\1\5\1\21\1\3\1\13\1\20\6\16\2\12\1\45\1\2\1\27\1\30\1\31\1\41\1\43\1"+
    "\11\1\17\2\11\1\10\1\11\10\22\1\15\1\7\7\22\1\14\2\22\1\52\1\25\1\53\1\35"+
    "\1\54\1\0\1\74\1\62\1\23\1\101\1\56\1\77\1\76\1\70\1\67\1\22\1\100\1\75\1"+
    "\71\1\72\1\64\1\60\1\22\1\65\1\57\1\55\1\61\1\73\1\66\1\63\1\102\1\22\1\50"+
    "\1\36\1\51\1\42\6\0\1\1\32\0\1\1\77\0\12\6\46\0\12\6\14\0\12\6\20\0\12\6\6"+
    "\0\12\6\6\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\26\0\12\6\16\0\62\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\7\2\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\17\7\4\37\1\40\2\37\1\40\15\37"+
    "\1\41\1\42\1\43\1\44\1\45\1\0\1\46\3\0"+
    "\1\47\2\7\1\50\2\0\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\16\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\20\7\1\74\3\7\1\75\12\7\1\76\2\7\1\77"+
    "\1\0\1\6\1\0\3\6\1\100\4\7\1\101\1\102"+
    "\1\103\1\104\2\7\1\105\13\7\1\106\1\7\1\107"+
    "\15\7\1\110\1\111\2\7\1\112\1\7\1\113\2\7"+
    "\1\0\1\46\1\6\5\7\1\114\1\115\1\116\4\7"+
    "\1\117\1\120\17\7\1\121\10\7\1\6\2\7\1\122"+
    "\1\123\3\7\1\124\10\7\1\125\1\7\1\126\3\7"+
    "\1\127\4\7\1\130\1\131\1\132\1\133\1\134\2\7"+
    "\1\135\1\136\1\137\1\7\1\140\3\7\1\141\1\142"+
    "\2\7\1\143\1\144\1\145\1\146\7\7\1\147\1\150"+
    "\2\7\1\151\1\152\1\7\1\153\1\154\1\155\3\7"+
    "\1\156\1\157\1\7\1\160\1\7\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\206\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\206\0\u01d5\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929"+
    "\0\u096c\0\u09af\0\u09f2\0\206\0\u010c\0\u014f\0\u0192\0\u0a35"+
    "\0\u0218\0\u025b\0\u0a78\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0abb\0\206\0\206\0\206\0\u0afe\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\206\0\u0d59\0\u0d9c"+
    "\0\206\0\u0ddf\0\206\0\206\0\206\0\206\0\u0e22\0\206"+
    "\0\206\0\u0e65\0\206\0\206\0\u0ea8\0\206\0\206\0\206"+
    "\0\206\0\206\0\206\0\206\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u01d5\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u01d5\0\u16c5\0\u1708\0\206\0\u174b"+
    "\0\u174b\0\u178e\0\u17d1\0\u0c0a\0\u0c4d\0\206\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\206\0\206\0\206\0\206\0\u1920\0\u1963"+
    "\0\u01d5\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u01d5\0\u1c87\0\u01d5\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u01d5\0\u01d5\0\u2031\0\u2074"+
    "\0\u01d5\0\u20b7\0\u01d5\0\u20fa\0\u213d\0\u2180\0\u2180\0\u21c3"+
    "\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u01d5\0\u01d5\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u01d5\0\u284e\0\u2891"+
    "\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u01d5\0\u01d5\0\u2b2f\0\u2b72\0\u2bb5\0\u01d5\0\u2bf8"+
    "\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u01d5"+
    "\0\u2e10\0\u01d5\0\u2e53\0\u2e96\0\u2ed9\0\u01d5\0\u2f1c\0\u2f5f"+
    "\0\u2fa2\0\u2fe5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u3028"+
    "\0\u306b\0\u01d5\0\u01d5\0\u01d5\0\u30ae\0\u01d5\0\u30f1\0\u3134"+
    "\0\u3177\0\u01d5\0\u01d5\0\u31ba\0\u31fd\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2"+
    "\0\u01d5\0\u01d5\0\u3415\0\u3458\0\u01d5\0\u01d5\0\u349b\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u34de\0\u3521\0\u3564\0\u01d5\0\u01d5\0\u35a7"+
    "\0\u01d5\0\u35ea\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\7\1\10\3\11"+
    "\1\10\1\12\2\11\1\10\1\11\1\10\1\13\1\11"+
    "\1\14\1\15\1\3\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\11\1\53\1\54\1\55\1\56\2\11\1\57\1\60"+
    "\1\61\2\11\1\62\1\11\1\63\1\11\1\64\1\4"+
    "\1\64\1\65\1\4\1\66\1\67\3\70\1\67\1\71"+
    "\2\70\1\67\1\70\1\67\1\72\1\70\1\73\1\74"+
    "\1\64\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\12\64\27\70\104\0"+
    "\1\4\2\0\1\4\101\0\1\111\24\0\1\112\102\0"+
    "\1\113\1\114\1\0\1\115\55\0\1\10\1\0\1\116"+
    "\1\0\2\10\2\0\1\10\1\0\1\10\1\117\34\0"+
    "\1\116\32\0\13\11\1\0\2\11\30\0\27\11\6\0"+
    "\1\10\1\0\1\116\1\0\2\10\1\120\1\121\1\10"+
    "\1\122\1\10\1\117\34\0\1\116\3\0\1\122\1\120"+
    "\1\121\24\0\1\117\3\0\2\117\2\0\1\117\1\0"+
    "\1\117\1\123\67\0\13\11\1\0\2\11\1\15\27\0"+
    "\10\11\1\124\7\11\1\125\6\11\4\15\1\0\17\15"+
    "\1\126\1\127\55\15\4\16\1\0\20\16\1\130\1\131"+
    "\54\16\27\0\1\132\1\133\102\0\1\134\1\135\101\0"+
    "\1\136\1\137\101\0\1\140\1\0\1\141\1\142\77\0"+
    "\1\143\102\0\1\144\2\0\1\145\1\146\76\0\1\147"+
    "\102\0\1\150\5\0\1\151\74\0\1\152\102\0\1\153"+
    "\113\0\1\154\47\0\13\11\1\0\2\11\30\0\2\11"+
    "\1\155\6\11\1\156\2\11\1\157\12\11\6\0\13\11"+
    "\1\0\2\11\30\0\7\11\1\160\1\11\1\161\4\11"+
    "\1\162\2\11\1\163\5\11\6\0\13\11\1\0\2\11"+
    "\30\0\1\11\1\164\1\165\2\11\1\166\4\11\1\167"+
    "\14\11\6\0\13\11\1\0\2\11\30\0\5\11\1\170"+
    "\12\11\1\171\6\11\6\0\13\11\1\0\2\11\30\0"+
    "\3\11\1\172\12\11\1\173\10\11\6\0\13\11\1\0"+
    "\2\11\30\0\11\11\1\174\15\11\6\0\13\11\1\0"+
    "\2\11\30\0\11\11\1\175\15\11\6\0\13\11\1\0"+
    "\2\11\30\0\2\11\1\176\24\11\6\0\13\11\1\0"+
    "\2\11\30\0\14\11\1\177\12\11\6\0\13\11\1\0"+
    "\2\11\30\0\16\11\1\200\4\11\1\201\3\11\6\0"+
    "\13\11\1\0\2\11\30\0\5\11\1\202\2\11\1\203"+
    "\7\11\1\204\6\11\6\0\13\11\1\0\2\11\30\0"+
    "\10\11\1\205\7\11\1\206\6\11\6\0\13\11\1\0"+
    "\2\11\30\0\3\11\1\207\6\11\1\210\3\11\1\211"+
    "\2\11\1\212\5\11\6\0\13\11\1\0\2\11\30\0"+
    "\10\11\1\213\5\11\1\214\1\11\1\215\6\11\6\0"+
    "\13\11\1\0\2\11\30\0\2\11\1\216\24\11\6\0"+
    "\13\70\1\0\2\70\30\0\27\70\6\0\13\70\1\0"+
    "\2\70\1\15\27\0\27\70\4\111\1\0\76\111\30\0"+
    "\1\217\57\0\1\220\1\221\3\0\2\221\2\0\1\221"+
    "\1\0\1\221\70\0\1\117\2\222\1\0\2\117\2\0"+
    "\1\117\1\0\1\117\35\0\1\222\1\0\1\222\32\0"+
    "\4\223\2\0\3\223\2\0\1\223\32\0\1\223\3\0"+
    "\1\223\11\0\1\223\2\0\1\223\1\0\1\223\14\0"+
    "\1\224\2\0\1\224\1\0\1\224\75\0\1\225\4\0"+
    "\1\225\103\0\1\226\67\0\13\11\1\0\2\11\30\0"+
    "\15\11\1\227\1\230\10\11\6\0\13\11\1\0\2\11"+
    "\30\0\1\11\1\231\14\11\1\232\10\11\103\15\103\16"+
    "\30\0\1\233\102\0\1\234\102\0\1\235\102\0\1\236"+
    "\60\0\13\11\1\0\2\11\30\0\3\11\1\237\23\11"+
    "\6\0\13\11\1\0\2\11\30\0\5\11\1\240\20\11"+
    "\1\241\6\0\13\11\1\0\2\11\30\0\13\11\1\242"+
    "\13\11\6\0\13\11\1\0\2\11\30\0\1\11\1\243"+
    "\2\11\1\244\22\11\6\0\13\11\1\0\2\11\30\0"+
    "\11\11\1\245\15\11\6\0\13\11\1\0\2\11\30\0"+
    "\5\11\1\246\21\11\6\0\13\11\1\0\2\11\30\0"+
    "\3\11\1\247\23\11\6\0\13\11\1\0\2\11\30\0"+
    "\11\11\1\250\13\11\1\251\1\11\6\0\13\11\1\0"+
    "\1\11\1\252\30\0\27\11\6\0\13\11\1\0\2\11"+
    "\30\0\3\11\1\253\23\11\6\0\13\11\1\0\2\11"+
    "\30\0\13\11\1\254\13\11\6\0\13\11\1\0\2\11"+
    "\30\0\6\11\1\255\20\11\6\0\13\11\1\0\1\11"+
    "\1\256\30\0\27\11\6\0\13\11\1\0\2\11\30\0"+
    "\2\11\1\257\24\11\6\0\13\11\1\0\2\11\30\0"+
    "\11\11\1\260\1\11\1\261\11\11\1\262\1\11\6\0"+
    "\13\11\1\0\2\11\30\0\2\11\1\263\24\11\6\0"+
    "\13\11\1\0\2\11\30\0\2\11\1\264\24\11\6\0"+
    "\13\11\1\0\2\11\30\0\1\11\1\265\1\11\1\266"+
    "\23\11\6\0\13\11\1\0\2\11\30\0\13\11\1\267"+
    "\13\11\6\0\13\11\1\0\2\11\30\0\21\11\1\270"+
    "\5\11\6\0\13\11\1\0\2\11\30\0\21\11\1\271"+
    "\5\11\6\0\13\11\1\0\2\11\30\0\20\11\1\272"+
    "\6\11\6\0\13\11\1\0\2\11\30\0\24\11\1\273"+
    "\2\11\6\0\13\11\1\0\2\11\30\0\21\11\1\274"+
    "\5\11\6\0\13\11\1\0\2\11\30\0\11\11\1\275"+
    "\15\11\6\0\13\11\1\0\2\11\30\0\15\11\1\276"+
    "\10\11\1\277\6\0\13\11\1\0\2\11\30\0\20\11"+
    "\1\300\6\11\6\0\13\11\1\0\2\11\30\0\25\11"+
    "\1\301\1\11\6\0\13\11\1\0\2\11\30\0\13\11"+
    "\1\302\13\11\6\0\13\11\1\0\2\11\30\0\11\11"+
    "\1\303\15\11\6\0\13\11\1\0\2\11\30\0\21\11"+
    "\1\304\5\11\6\0\13\11\1\0\2\11\30\0\23\11"+
    "\1\305\3\11\6\0\1\221\3\0\2\221\2\0\1\221"+
    "\1\0\1\221\67\0\1\306\1\307\3\0\2\307\2\0"+
    "\1\307\1\0\1\307\71\0\1\116\1\310\3\223\2\0"+
    "\3\223\2\0\1\223\32\0\1\310\1\0\1\116\1\0"+
    "\1\223\11\0\1\223\2\0\1\223\1\0\1\223\7\0"+
    "\13\11\1\0\2\11\30\0\4\11\1\311\22\11\6\0"+
    "\13\11\1\0\2\11\30\0\1\11\1\312\1\11\1\313"+
    "\23\11\6\0\13\11\1\0\1\11\1\314\30\0\27\11"+
    "\6\0\13\11\1\0\1\11\1\315\30\0\27\11\6\0"+
    "\13\11\1\0\2\11\30\0\1\11\1\316\25\11\6\0"+
    "\13\11\1\0\2\11\30\0\2\11\1\317\24\11\6\0"+
    "\13\11\1\0\2\11\30\0\3\11\1\320\23\11\6\0"+
    "\13\11\1\0\2\11\30\0\2\11\1\321\24\11\6\0"+
    "\13\11\1\0\2\11\30\0\10\11\1\322\16\11\6\0"+
    "\13\11\1\0\2\11\30\0\10\11\1\323\14\11\1\324"+
    "\1\11\6\0\13\11\1\0\2\11\30\0\15\11\1\325"+
    "\11\11\6\0\13\11\1\0\2\11\30\0\2\11\1\326"+
    "\24\11\6\0\13\11\1\0\2\11\30\0\5\11\1\327"+
    "\21\11\6\0\13\11\1\0\1\11\1\330\30\0\27\11"+
    "\6\0\13\11\1\0\2\11\30\0\1\11\1\331\25\11"+
    "\6\0\13\11\1\0\2\11\30\0\4\11\1\332\22\11"+
    "\6\0\13\11\1\0\2\11\30\0\1\11\1\333\25\11"+
    "\6\0\13\11\1\0\2\11\30\0\24\11\1\334\2\11"+
    "\6\0\13\11\1\0\2\11\30\0\2\11\1\335\24\11"+
    "\6\0\13\11\1\0\2\11\30\0\10\11\1\336\16\11"+
    "\6\0\13\11\1\0\2\11\30\0\2\11\1\337\24\11"+
    "\6\0\13\11\1\0\2\11\30\0\20\11\1\340\6\11"+
    "\6\0\13\11\1\0\2\11\30\0\21\11\1\341\5\11"+
    "\6\0\13\11\1\0\2\11\30\0\5\11\1\342\21\11"+
    "\6\0\13\11\1\0\2\11\30\0\5\11\1\343\21\11"+
    "\6\0\13\11\1\0\2\11\30\0\21\11\1\344\5\11"+
    "\6\0\13\11\1\0\2\11\30\0\13\11\1\345\13\11"+
    "\6\0\13\11\1\0\2\11\30\0\21\11\1\346\5\11"+
    "\6\0\13\11\1\0\2\11\30\0\21\11\1\347\5\11"+
    "\6\0\13\11\1\0\2\11\30\0\2\11\1\350\24\11"+
    "\6\0\13\11\1\0\2\11\30\0\20\11\1\351\6\11"+
    "\6\0\13\11\1\0\2\11\30\0\16\11\1\352\10\11"+
    "\6\0\13\11\1\0\2\11\30\0\13\11\1\353\13\11"+
    "\6\0\13\11\1\0\2\11\30\0\22\11\1\354\4\11"+
    "\6\0\13\11\1\0\2\11\30\0\3\11\1\355\23\11"+
    "\6\0\13\11\1\0\2\11\30\0\2\11\1\356\24\11"+
    "\6\0\1\307\3\0\2\307\2\0\1\307\1\0\1\307"+
    "\67\0\1\220\1\221\1\116\1\310\1\223\2\357\2\0"+
    "\1\357\1\223\1\357\2\0\1\223\32\0\1\310\1\0"+
    "\1\116\1\0\1\223\11\0\1\223\2\0\1\223\1\0"+
    "\1\223\7\0\13\11\1\0\2\11\30\0\1\11\1\360"+
    "\25\11\6\0\13\11\1\0\2\11\30\0\13\11\1\361"+
    "\13\11\6\0\13\11\1\0\2\11\30\0\1\11\1\362"+
    "\25\11\6\0\13\11\1\0\2\11\30\0\14\11\1\363"+
    "\12\11\6\0\13\11\1\0\2\11\30\0\2\11\1\364"+
    "\24\11\6\0\13\11\1\0\2\11\30\0\11\11\1\365"+
    "\15\11\6\0\13\11\1\0\2\11\30\0\11\11\1\366"+
    "\15\11\6\0\13\11\1\0\2\11\30\0\11\11\1\367"+
    "\15\11\6\0\13\11\1\0\2\11\30\0\2\11\1\370"+
    "\24\11\6\0\13\11\1\0\1\11\1\371\30\0\27\11"+
    "\6\0\13\11\1\0\2\11\30\0\20\11\1\372\6\11"+
    "\6\0\13\11\1\0\2\11\30\0\13\11\1\373\13\11"+
    "\6\0\13\11\1\0\2\11\30\0\2\11\1\374\24\11"+
    "\6\0\13\11\1\0\1\11\1\375\30\0\27\11\6\0"+
    "\13\11\1\0\2\11\30\0\2\11\1\376\24\11\6\0"+
    "\13\11\1\0\2\11\30\0\20\11\1\377\6\11\6\0"+
    "\13\11\1\0\2\11\30\0\16\11\1\u0100\10\11\6\0"+
    "\13\11\1\0\2\11\30\0\23\11\1\u0101\3\11\6\0"+
    "\13\11\1\0\2\11\30\0\24\11\1\u0102\2\11\6\0"+
    "\13\11\1\0\2\11\30\0\3\11\1\u0103\23\11\6\0"+
    "\13\11\1\0\2\11\30\0\11\11\1\u0104\15\11\6\0"+
    "\13\11\1\0\2\11\30\0\15\11\1\u0105\11\11\6\0"+
    "\13\11\1\0\2\11\30\0\2\11\1\u0106\24\11\6\0"+
    "\13\11\1\0\2\11\30\0\16\11\1\u0107\10\11\6\0"+
    "\13\11\1\0\2\11\30\0\13\11\1\u0108\13\11\6\0"+
    "\13\11\1\0\2\11\30\0\25\11\1\u0109\1\11\6\0"+
    "\13\11\1\0\2\11\30\0\1\11\1\u010a\25\11\6\0"+
    "\13\11\1\0\1\11\1\u010b\30\0\27\11\6\0\13\11"+
    "\1\0\2\11\30\0\1\11\1\u010c\25\11\6\0\13\11"+
    "\1\0\2\11\30\0\16\11\1\u010d\10\11\6\0\13\11"+
    "\1\0\2\11\30\0\2\11\1\u010e\24\11\6\0\13\11"+
    "\1\0\2\11\30\0\11\11\1\u010f\15\11\6\0\1\221"+
    "\1\116\1\310\1\223\2\357\2\0\1\357\1\223\1\357"+
    "\2\0\1\223\32\0\1\310\1\0\1\116\1\0\1\223"+
    "\11\0\1\223\2\0\1\223\1\0\1\223\7\0\13\11"+
    "\1\0\2\11\30\0\13\11\1\u0110\13\11\6\0\13\11"+
    "\1\0\2\11\30\0\16\11\1\u0111\10\11\6\0\13\11"+
    "\1\0\2\11\30\0\21\11\1\u0112\5\11\6\0\13\11"+
    "\1\0\2\11\30\0\16\11\1\u0113\10\11\6\0\13\11"+
    "\1\0\2\11\30\0\1\11\1\u0114\25\11\6\0\13\11"+
    "\1\0\2\11\30\0\23\11\1\u0115\3\11\6\0\13\11"+
    "\1\0\2\11\30\0\1\11\1\u0116\25\11\6\0\13\11"+
    "\1\0\2\11\30\0\21\11\1\u0117\5\11\6\0\13\11"+
    "\1\0\2\11\30\0\10\11\1\u0118\16\11\6\0\13\11"+
    "\1\0\2\11\30\0\16\11\1\u0119\10\11\6\0\13\11"+
    "\1\0\2\11\30\0\14\11\1\u011a\12\11\6\0\13\11"+
    "\1\0\2\11\30\0\25\11\1\u011b\1\11\6\0\13\11"+
    "\1\0\1\11\1\u011c\30\0\27\11\6\0\13\11\1\0"+
    "\2\11\30\0\13\11\1\u011d\13\11\6\0\13\11\1\0"+
    "\2\11\30\0\2\11\1\u011e\24\11\6\0\13\11\1\0"+
    "\2\11\30\0\16\11\1\u011f\10\11\6\0\13\11\1\0"+
    "\2\11\30\0\2\11\1\u0120\24\11\6\0\13\11\1\0"+
    "\2\11\30\0\2\11\1\u0121\24\11\6\0\13\11\1\0"+
    "\2\11\30\0\20\11\1\u0122\6\11\6\0\13\11\1\0"+
    "\1\11\1\u0123\30\0\27\11\6\0\13\11\1\0\2\11"+
    "\30\0\13\11\1\u0124\13\11\6\0\13\11\1\0\2\11"+
    "\30\0\15\11\1\u0125\11\11\6\0\13\11\1\0\2\11"+
    "\30\0\5\11\1\u0126\21\11\6\0\13\11\1\0\2\11"+
    "\30\0\2\11\1\u0127\24\11\6\0\13\11\1\0\2\11"+
    "\30\0\21\11\1\u0128\5\11\6\0\13\11\1\0\2\11"+
    "\30\0\16\11\1\u0129\10\11\6\0\13\11\1\0\2\11"+
    "\30\0\25\11\1\u012a\1\11\6\0\13\11\1\0\2\11"+
    "\30\0\14\11\1\u012b\12\11\6\0\13\11\1\0\2\11"+
    "\30\0\16\11\1\u012c\10\11\6\0\13\11\1\0\2\11"+
    "\30\0\3\11\1\u012d\23\11\6\0\13\11\1\0\1\11"+
    "\1\u012e\30\0\27\11\6\0\13\11\1\0\2\11\30\0"+
    "\21\11\1\u012f\5\11\6\0\13\11\1\0\2\11\30\0"+
    "\2\11\1\u0130\24\11\6\0\13\11\1\0\2\11\30\0"+
    "\2\11\1\u0131\24\11\6\0\13\11\1\0\2\11\30\0"+
    "\11\11\1\u0132\15\11\6\0\13\11\1\0\1\11\1\u0133"+
    "\30\0\27\11\6\0\13\11\1\0\2\11\30\0\20\11"+
    "\1\u0134\6\11\6\0\13\11\1\0\2\11\30\0\2\11"+
    "\1\u0135\24\11\6\0\13\11\1\0\2\11\30\0\2\11"+
    "\1\u0136\24\11\6\0\13\11\1\0\1\11\1\u0137\30\0"+
    "\27\11\6\0\13\11\1\0\2\11\30\0\6\11\1\u0138"+
    "\20\11\6\0\13\11\1\0\2\11\30\0\25\11\1\u0139"+
    "\1\11\6\0\13\11\1\0\2\11\30\0\21\11\1\u013a"+
    "\5\11\6\0\13\11\1\0\2\11\30\0\2\11\1\u013b"+
    "\24\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13869];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\24\1\12\11\20\1\1\11"+
    "\25\1\3\11\1\1\1\0\1\1\3\0\3\1\1\11"+
    "\2\0\1\11\1\1\4\11\1\1\2\11\1\1\2\11"+
    "\1\1\7\11\42\1\1\11\1\0\1\1\1\0\3\1"+
    "\1\11\4\1\4\11\47\1\1\0\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLexer() { this((java.io.Reader) null); }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ZigLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 114: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 115: break;
          case 3: 
            { return ZigTypes.SEMICOLON_SYM;
            } 
            // fall through
          case 116: break;
          case 4: 
            { return ZigTypes.DIV_SYM;
            } 
            // fall through
          case 117: break;
          case 5: 
            { return ZigTypes.MINUS_SYM;
            } 
            // fall through
          case 118: break;
          case 6: 
            { return ZigTypes.INT_LITERAL;
            } 
            // fall through
          case 119: break;
          case 7: 
            { return ZigTypes.SYM;
            } 
            // fall through
          case 120: break;
          case 8: 
            { return ZigTypes.DOT_SYM;
            } 
            // fall through
          case 121: break;
          case 9: 
            { return ZigTypes.LT_SYM;
            } 
            // fall through
          case 122: break;
          case 10: 
            { return ZigTypes.EQ_SYM;
            } 
            // fall through
          case 123: break;
          case 11: 
            { return ZigTypes.GT_SYM;
            } 
            // fall through
          case 124: break;
          case 12: 
            { return ZigTypes.PLUS_SYM;
            } 
            // fall through
          case 125: break;
          case 13: 
            { return ZigTypes.MOD_SYM;
            } 
            // fall through
          case 126: break;
          case 14: 
            { return ZigTypes.STAR_SYM;
            } 
            // fall through
          case 127: break;
          case 15: 
            { return ZigTypes.EXPONENT_SYM;
            } 
            // fall through
          case 128: break;
          case 16: 
            { return ZigTypes.SEP_SYM;
            } 
            // fall through
          case 129: break;
          case 17: 
            { return ZigTypes.NOT_SYM;
            } 
            // fall through
          case 130: break;
          case 18: 
            { return ZigTypes.AND_SYM;
            } 
            // fall through
          case 131: break;
          case 19: 
            { return ZigTypes.QUESTION_SYM;
            } 
            // fall through
          case 132: break;
          case 20: 
            { return ZigTypes.BITWISE_NOT_SYM;
            } 
            // fall through
          case 133: break;
          case 21: 
            { yybegin(AFTER_AT); return ZigTypes.AT_SYM;
            } 
            // fall through
          case 134: break;
          case 22: 
            { return ZigTypes.COMMA_SYM;
            } 
            // fall through
          case 135: break;
          case 23: 
            { return ZigTypes.COLON_SYM;
            } 
            // fall through
          case 136: break;
          case 24: 
            { return ZigTypes.LEFT_PAREN;
            } 
            // fall through
          case 137: break;
          case 25: 
            { return ZigTypes.RIGHT_PAREN;
            } 
            // fall through
          case 138: break;
          case 26: 
            { return ZigTypes.LEFT_BRACE;
            } 
            // fall through
          case 139: break;
          case 27: 
            { return ZigTypes.RIGHT_BRACE;
            } 
            // fall through
          case 140: break;
          case 28: 
            { return ZigTypes.LEFT_BRACKET;
            } 
            // fall through
          case 141: break;
          case 29: 
            { return ZigTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 142: break;
          case 30: 
            { return ZigTypes.UNDER_LINE;
            } 
            // fall through
          case 143: break;
          case 31: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 144: break;
          case 32: 
            { yybegin(YYINITIAL); return ZigTypes.BUILTIN_FUNCTION;
            } 
            // fall through
          case 145: break;
          case 33: 
            { return ZigTokenType.LINE_COMMENT;
            } 
            // fall through
          case 146: break;
          case 34: 
            { return ZigTypes.DIV_ASSIGN_SYM;
            } 
            // fall through
          case 147: break;
          case 35: 
            { return ZigTypes.MINUS_ASSIGN_SYM;
            } 
            // fall through
          case 148: break;
          case 36: 
            { return ZigTypes.SMALL_ARROW_SYM;
            } 
            // fall through
          case 149: break;
          case 37: 
            { return ZigTypes.MINUS_MOD_SYM;
            } 
            // fall through
          case 150: break;
          case 38: 
            { return ZigTypes.FLOAT_LITERAL;
            } 
            // fall through
          case 151: break;
          case 39: 
            { return ZigTypes.SLICE_SYM;
            } 
            // fall through
          case 152: break;
          case 40: 
            { return ZigTypes.STR;
            } 
            // fall through
          case 153: break;
          case 41: 
            { return ZigTypes.CHAR_LITERAL;
            } 
            // fall through
          case 154: break;
          case 42: 
            { return ZigTypes.SHL_SYM;
            } 
            // fall through
          case 155: break;
          case 43: 
            { return ZigTypes.LE_SYM;
            } 
            // fall through
          case 156: break;
          case 44: 
            { return ZigTypes.EQUAL_SYM;
            } 
            // fall through
          case 157: break;
          case 45: 
            { return ZigTypes.ARROW_SYM;
            } 
            // fall through
          case 158: break;
          case 46: 
            { return ZigTypes.GE_SYM;
            } 
            // fall through
          case 159: break;
          case 47: 
            { return ZigTypes.SHR_SYM;
            } 
            // fall through
          case 160: break;
          case 48: 
            { return ZigTypes.PLUS_ASSIGN_SYM;
            } 
            // fall through
          case 161: break;
          case 49: 
            { return ZigTypes.INC_SYM;
            } 
            // fall through
          case 162: break;
          case 50: 
            { return ZigTypes.PLUS_MOD_SYM;
            } 
            // fall through
          case 163: break;
          case 51: 
            { return ZigTypes.MOD_ASSIGN_SYM;
            } 
            // fall through
          case 164: break;
          case 52: 
            { return ZigTypes.STAR_ASSIGN_SYM;
            } 
            // fall through
          case 165: break;
          case 53: 
            { return ZigTypes.STAR_STAR_SYM;
            } 
            // fall through
          case 166: break;
          case 54: 
            { return ZigTypes.EXPONENT_ASSIGN_SYM;
            } 
            // fall through
          case 167: break;
          case 55: 
            { return ZigTypes.OR_ASSIGN_SYM;
            } 
            // fall through
          case 168: break;
          case 56: 
            { return ZigTypes.SEP_SEP_SYM;
            } 
            // fall through
          case 169: break;
          case 57: 
            { return ZigTypes.UNEQUAL_SYM;
            } 
            // fall through
          case 170: break;
          case 58: 
            { return ZigTypes.AND_ASSIGN_SYM;
            } 
            // fall through
          case 171: break;
          case 59: 
            { return ZigTypes.VERY_QUESTION_SYM;
            } 
            // fall through
          case 172: break;
          case 60: 
            { return ZigTypes.OR_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 61: 
            { return ZigTypes.IF_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 62: 
            { return ZigTypes.FN_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 63: 
            { return ZigTypes.MINUS_MOD_ASSIGN_SYM;
            } 
            // fall through
          case 176: break;
          case 64: 
            { return ZigTypes.RANGE_SYM;
            } 
            // fall through
          case 177: break;
          case 65: 
            { return ZigTypes.SHL_ASSIGN_SYM;
            } 
            // fall through
          case 178: break;
          case 66: 
            { return ZigTypes.SHR_ASSIGN_SYM;
            } 
            // fall through
          case 179: break;
          case 67: 
            { return ZigTypes.PLUS_MOD_ASSIGN_SYM;
            } 
            // fall through
          case 180: break;
          case 68: 
            { return ZigTypes.STAR_MOD_ASSIGN_SYM;
            } 
            // fall through
          case 181: break;
          case 69: 
            { return ZigTypes.TRY_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 70: 
            { return ZigTypes.PUB_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 71: 
            { return ZigTypes.USE_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 72: 
            { return ZigTypes.VAR_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 73: 
            { return ZigTypes.ASM_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 74: 
            { return ZigTypes.AND_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 75: 
            { return ZigTypes.FOR_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 76: 
            { return ZigTypes.TEST_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 77: 
            { return ZigTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 78: 
            { return ZigTypes.THIS_KEYWORD;
            } 
            // fall through
          case 191: break;
          case 79: 
            { return ZigTypes.ENUM_KEYWORD;
            } 
            // fall through
          case 192: break;
          case 80: 
            { return ZigTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 81: 
            { return ZigTypes.NULL_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 82: 
            { return ZigTypes.CONST_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 83: 
            { return ZigTypes.CATCH_KEYWORD;
            } 
            // fall through
          case 196: break;
          case 84: 
            { return ZigTypes.ERROR_KEYWORD;
            } 
            // fall through
          case 197: break;
          case 85: 
            { return ZigTypes.UNION_KEYWORD;
            } 
            // fall through
          case 198: break;
          case 86: 
            { return ZigTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 199: break;
          case 87: 
            { return ZigTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 200: break;
          case 88: 
            { return ZigTypes.ASYNC_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 89: 
            { return ZigTypes.AWAIT_KEYWORD;
            } 
            // fall through
          case 202: break;
          case 90: 
            { return ZigTypes.ALIGN_KEYWORD;
            } 
            // fall through
          case 203: break;
          case 91: 
            { return ZigTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 204: break;
          case 92: 
            { return ZigTypes.DEFER_KEYWORD;
            } 
            // fall through
          case 205: break;
          case 93: 
            { return ZigTypes.CANCEL_KEYWORD;
            } 
            // fall through
          case 206: break;
          case 94: 
            { return ZigTypes.EXTERN_KEYWORD;
            } 
            // fall through
          case 207: break;
          case 95: 
            { return ZigTypes.EXPORT_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 96: 
            { return ZigTypes.STRUCT_KEYWORD;
            } 
            // fall through
          case 209: break;
          case 97: 
            { return ZigTypes.SWITCH_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 98: 
            { return ZigTypes.PACKED_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 99: 
            { return ZigTypes.ORELSE_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 100: 
            { return ZigTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 101: 
            { return ZigTypes.RESUME_KEYWORD;
            } 
            // fall through
          case 214: break;
          case 102: 
            { return ZigTypes.INLINE_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 103: 
            { return ZigTypes.SECTION_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 104: 
            { return ZigTypes.SUSPEND_KEYWORD;
            } 
            // fall through
          case 217: break;
          case 105: 
            { return ZigTypes.NOALIAS_KEYWORD;
            } 
            // fall through
          case 218: break;
          case 106: 
            { return ZigTypes.NAKEDCC_KEYWORD;
            } 
            // fall through
          case 219: break;
          case 107: 
            { return ZigTypes.COMPTIME_KEYWORD;
            } 
            // fall through
          case 220: break;
          case 108: 
            { return ZigTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 221: break;
          case 109: 
            { return ZigTypes.DEFERROR_KEYWORD;
            } 
            // fall through
          case 222: break;
          case 110: 
            { return ZigTypes.VOLATILE_KEYWORD;
            } 
            // fall through
          case 223: break;
          case 111: 
            { return ZigTypes.STDCALLCC_KEYWORD;
            } 
            // fall through
          case 224: break;
          case 112: 
            { return ZigTypes.UNDEFINED_KEYWORD;
            } 
            // fall through
          case 225: break;
          case 113: 
            { return ZigTypes.UNREACHABLE_KEYWORD;
            } 
            // fall through
          case 226: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

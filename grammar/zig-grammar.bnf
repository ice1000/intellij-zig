{
  parserClass='org.ziglang.ZigParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Zig'
  psiImplClassSuffix='Impl'
  psiPackage='org.ziglang.psi'
  psiImplPackage='org.ziglang.psi.impl'

  extends('.*Expr')=expr

  tokenTypeClass='org.ziglang.ZigTokenType'
  elementTypeHolderClass='org.ziglang.psi.ZigTypes'
  elementTypeClass='org.ziglang.ZigElementType'
}

zigFile ::= topLevelItem*

symbol ::= SYM {
	extends=expr
	implements=['org.ziglang.psi.impl.IZigSymbol']
	mixin='org.ziglang.psi.impl.ZigSymbolMixin'
}

string ::= STR | RAW_STR {
	extends=expr
	implements=['com.intellij.psi.PsiLanguageInjectionHost']
	mixin='org.ziglang.psi.impl.ZigStringMixin'
}

private topLevelItem ::=
   COMPTIME_KEYWORD block
 | fnDeclaration
 | externDeclaration
 | globalVarDeclaration
 | useDeclaration
 | testDeclaration
 | expr // for `fromText`

testDeclaration ::= TEST_KEYWORD string block
globalVarDeclaration ::=
 PUB_KEYWORD? EXPORT_KEYWORD?
  variableDeclaration
 SEMICOLON_SYM

localVariableDeclaration ::=
 COMPTIME_KEYWORD? variableDeclaration
 SEMICOLON_SYM

variableDeclaration ::=
 (VAR_KEYWORD | CONST_KEYWORD) symbol (COLON_SYM (typeExpr | primary))?
 (ALIGN_KEYWORD LEFT_PAREN expr RIGHT_PAREN)?
 (SECTION_KEYWORD LEFT_PAREN expr RIGHT_PAREN)?
 (EQ_SYM expr)? {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ziglang.psi.impl.ZigVariableDeclarationMixin'
}

containerField ::= symbol (COLON_SYM primary)? (EQ_SYM expr)? COMMA_SYM
containerMember ::=
   containerField
 | fnDeclaration
 | globalVarDeclaration

useDeclaration ::=
 PUB_KEYWORD? USE_KEYWORD expr
 SEMICOLON_SYM

externDeclaration ::=
 PUB_KEYWORD? EXTERN_KEYWORD string?
  (fnProto | variableDeclaration)
 SEMICOLON_SYM

fnProto ::=
 ( NAKEDCC_KEYWORD
 | STDCALLCC_KEYWORD
 | EXTERN_KEYWORD
 | (ASYNC_KEYWORD (LEFT_PAREN expr RIGHT_PAREN)?)
 )?
 FN_KEYWORD symbol? parameterList (ALIGN_KEYWORD LEFT_PAREN expr RIGHT_PAREN)?
 (SECTION_KEYWORD LEFT_PAREN expr RIGHT_PAREN)? NOT_SYM? (typeExpr | VAR_KEYWORD) {
	extends=expr
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ziglang.psi.impl.TrivialDeclaration'
}

fnDeclaration ::=
 PUB_KEYWORD? (INLINE_KEYWORD | EXPORT_KEYWORD)?
  fnProto block {
	mixin='org.ziglang.psi.impl.ZigFnDeclarationMixin'
}

parameterList ::= LEFT_PAREN (paramDeclaration (COMMA_SYM paramDeclaration)*)? RIGHT_PAREN

paramDeclaration ::=
 (NOALIAS_KEYWORD | COMPTIME_KEYWORD)?
 (symbol COLON_SYM)?
 (typeExpr | VAR_KEYWORD | RANGE_SYM) {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ziglang.psi.impl.ZigParamDeclarationMixin'
}

statement ::=
   localVariableDeclaration
 | deferBlock
 | defer SEMICOLON_SYM
 | blockBlock
 | expr? SEMICOLON_SYM {
	pin=1
}

private exprOrBlock ::= block | expr

block ::= (symbol COLON_SYM)? LEFT_BRACE statement* RIGHT_BRACE {
	mixin='org.ziglang.psi.impl.ZigBlockMixin'
}

asmOutput ::= COLON_SYM (asmOutputItem (COMMA_SYM asmOutputItem)*)? asmInput?
asmInput ::= COLON_SYM (asmInputItem (COMMA_SYM asmInputItem)*)? asmClobbers?
asmOutputItem ::= LEFT_BRACKET symbol RIGHT_BRACKET string LEFT_PAREN (symbol | SMALL_ARROW_SYM typeExpr) RIGHT_PAREN
asmInputItem ::= LEFT_BRACKET symbol RIGHT_BRACKET string LEFT_PAREN expr RIGHT_PAREN
asmClobbers ::= COLON_SYM (string (COMMA_SYM string)*)?

unwrapNullable ::= VERY_QUESTION_SYM expr
unwrapError ::= CATCH_KEYWORD (SEP_SYM symbol SEP_SYM)? expr

assignOperator ::=
   EQ_SYM
 | TIMES_ASSIGN_SYM
 | DIV_ASSIGN_SYM
 | MOD_ASSIGN_SYM
 | PLUS_ASSIGN_SYM
 | STAR_ASSIGN_SYM
 | MINUS_ASSIGN_SYM
 | SHL_ASSIGN_SYM
 | SHR_ASSIGN_SYM
 | AND_ASSIGN_SYM
 | EXPONENT_ASSIGN_SYM
 | OR_ASSIGN_SYM
 | STAR_MOD_ASSIGN_SYM
 | PLUS_MOD_ASSIGN_SYM
 | MINUS_MOD_ASSIGN_SYM

//BlockExpr(body) ::= Block | IfExpr(body) | IfErrorExpr(body) | TestExpr(body) | WhileExpr(body) | ForExpr(body) | switchExpr | CompTimeExpr(body) | SuspendExpr(body)
//Bnf泛型编程(雾
blockBlock ::=
   block
 | ifBlock
 | ifErrorBlock
 | testBlock
 | whileBlock
 | forBlock
 | switchStatement
 | compTimeBlock
 | suspendBlock

blockExpr ::=
   block
 | ifExprOrBlock
 | ifErrorExprOrBlock
 | testExprOrBlock
 | whileExprOrBlock
 | forOrBlock
 | switchStatement
 | compTimeExprOrBlock
 | suspendExprOrBlock

//CompTimeExpr(body) ::= "comptime" body
compTimeBlock ::= COMPTIME_KEYWORD block
compTimeExprOrBlock ::= COMPTIME_KEYWORD exprOrBlock

switchStatement ::=
 SWITCH_KEYWORD
  LEFT_PAREN expr RIGHT_PAREN
  LEFT_BRACE switchProng* RIGHT_BRACE
switchItem ::= expr (RANGE_SYM expr)?
switchProng ::=
 (ELSE_KEYWORD | (switchItem (COMMA_SYM switchItem)*)?)
 ARROW_SYM
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
 expr COMMA_SYM

//ForExpr(body) ::=
// (symbol COLON_SYM)? INLINE_KEYWORD?
// FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
//  option(SEP_SYM STAR_SYM? symbol option(COMMA_SYM symbol) SEP_SYM)
//   body
//  option(ELSE_KEYWORD BlockExpr(body))

forBlock ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol (COMMA_SYM symbol)? SEP_SYM)?
   block
  (ELSE_KEYWORD blockBlock)?

forOrBlock ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol (COMMA_SYM symbol)? SEP_SYM)?
   exprOrBlock
  (ELSE_KEYWORD blockExpr)?

defer ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) expr
deferBlock ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) block

//IfExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN body option("else" BlockExpr(body))
ifBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  block
 (ELSE_KEYWORD blockBlock)?
ifExprOrBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  exprOrBlock
 (ELSE_KEYWORD exprOrBlock)?

//SuspendExpr(body) ::= "suspend" option((SEP_SYM symbol SEP_SYM body))
suspendBlock ::= SUSPEND_KEYWORD (SEP_SYM symbol SEP_SYM block)?
suspendExprOrBlock ::= SUSPEND_KEYWORD (SEP_SYM symbol SEP_SYM exprOrBlock)?

//IfErrorExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) body "else" SEP_SYM symbol SEP_SYM BlockExpr(body)
ifErrorBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  block
 ELSE_KEYWORD SEP_SYM symbol SEP_SYM blockBlock
ifErrorExprOrBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  exprOrBlock
 ELSE_KEYWORD SEP_SYM symbol SEP_SYM blockExpr

//TestExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) body option("else" BlockExpr(body))
testBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  block
 (ELSE_KEYWORD blockBlock)?
testExprOrBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  exprOrBlock
 (ELSE_KEYWORD blockExpr)?

//WhileExpr(body) ::= option(symbol COLON_SYM) option("inline") "while" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) option(COLON_SYM LEFT_PAREN expr RIGHT_PAREN) body option("else" (SEP_SYM symbol SEP_SYM)? BlockExpr(body))
whileBlock ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 WHILE_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  (COLON_SYM LEFT_PAREN expr RIGHT_PAREN)?
   block
  (ELSE_KEYWORD (SEP_SYM symbol SEP_SYM)? blockBlock)?

whileExprOrBlock ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 WHILE_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  (COLON_SYM LEFT_PAREN expr RIGHT_PAREN)?
   exprOrBlock

expr ::=
   tryExpr
 | returnExpr
 | breakExpr
 | assignExpr
 | cancelExpr
 | resumeExpr
 | awaitExpr
 | unwrapExpr
 | boolOrExpr
 | boolAndExpr
 | comparisonExpr
 | orElseExpr
 | binaryOrExpr
 | binaryXorExpr
 | binaryAndExpr
 | bitShiftExpr
 | additionExpr
 | multiplyExpr
 | curlySuffixExpr
 | typeExpr
 | prefixOpExpr
 | suffixOpExpr
 | asyncExpr
 | primary

private primary ::=
   integer
 | float
 | string
 | char
 | keywordLiteral
 | boolean
 | null
 | blockExpr
 | symbol
 | macroExpr
 | anonymousListLiterals
 | arrayExpr
 | fnProto
 | asmExpr
 | containerExpr
 | continueExpr
 | errorSetExpr
 | groupedExpr

returnExpr ::= RETURN_KEYWORD expr?
tryExpr ::= TRY_KEYWORD expr
awaitExpr ::= AWAIT_KEYWORD expr
breakExpr ::= BREAK_KEYWORD (COLON_SYM symbol)? expr?
cancelExpr ::= CANCEL_KEYWORD expr
resumeExpr ::= RESUME_KEYWORD expr
assignExpr ::= expr assignOperator expr
unwrapExpr ::= expr (unwrapNullable | unwrapError)
boolOrExpr ::= expr OR_KEYWORD expr
boolAndExpr ::= expr AND_KEYWORD expr
comparisonExpr ::= expr comparisonOperator expr
orElseExpr ::= expr ORELSE_KEYWORD expr
binaryOrExpr ::= expr SEP_SYM expr
binaryXorExpr ::= expr EXPONENT_SYM expr
binaryAndExpr ::= expr AND_SYM expr
bitShiftExpr ::= expr bitShiftOperator expr
additionExpr ::= expr additionOperator expr
multiplyExpr ::= expr multiplyOperator expr
curlySuffixExpr ::= expr containerInitSuffix
typeExpr ::= expr NOT_SYM expr
prefixOpExpr ::= prefixOp expr
asyncExpr ::= ASYNC_KEYWORD (LT_SYM primary GT_SYM)? primary fnCallSuffix
suffixOpExpr ::=
 expr
 (
   fnCallSuffix
 | arrayAccessSuffix
 | fieldAccessSuffix
 | sliceSuffix
 | pointerSuffix
 | optionalSuffix
 )

fieldAccessSuffix ::= DOT_SYM symbol
pointerSuffix ::= DOT_SYM STAR_SYM
optionalSuffix ::= DOT_SYM QUESTION_SYM
fnCallSuffix ::= LEFT_PAREN (expr (COMMA_SYM expr)*)? RIGHT_PAREN
arrayAccessSuffix ::= LEFT_BRACKET expr RIGHT_BRACKET
sliceSuffix ::= LEFT_BRACKET expr SLICE_SYM expr? RIGHT_BRACKET
containerInitSuffix ::= LEFT_BRACE (containerInitBody COMMA_SYM?)? RIGHT_BRACE

bitShiftOperator ::= SHL_SYM | SHR_SYM
additionOperator ::= PLUS_SYM | MINUS_SYM | INC_SYM | PLUS_MOD_SYM | MINUS_MOD_SYM
multiplyOperator ::= SEP_SEP_SYM | STAR_SYM | DIV_SYM | MOD_SYM | STAR_STAR_SYM | STAR_MOD_SYM
comparisonOperator ::=
   EQUAL_SYM
 | UNEQUAL_SYM
 | LT_SYM
 | GT_SYM
 | LE_SYM
 | GE_SYM

containerInitBody ::=
   structLiteralField (COMMA_SYM structLiteralField)*
 | expr (COMMA_SYM expr)*

structLiteralField ::= DOT_SYM symbol EQ_SYM expr

prefixOp ::=
   NOT_SYM
 | MINUS_SYM
 | BITWISE_NOT_SYM
 | STAR_SYM
 | AND_SYM
 ( ALIGN_KEYWORD LEFT_PAREN
   expr (COLON_SYM integer COLON_SYM integer)? RIGHT_PAREN
 )? CONST_KEYWORD? VOLATILE_KEYWORD?
 | QUESTION_SYM
 | VERY_QUESTION_SYM
 | MINUS_MOD_SYM
 | TRY_KEYWORD
 | AWAIT_KEYWORD

asmExpr ::=
 ASM_KEYWORD VOLATILE_KEYWORD?
 LEFT_PAREN string asmOutput? RIGHT_PAREN
arrayExpr ::=
 LEFT_BRACKET ( ASTERISK_SYM | UNDERSCORE_SYM | expr )? RIGHT_BRACKET
 (ALIGN_KEYWORD LEFT_PAREN expr (COLON_SYM integer COLON_SYM integer)? RIGHT_PAREN)?
 CONST_KEYWORD? VOLATILE_KEYWORD? typeExpr {
	extends=expr
}

anonymousListLiterals ::= DOT_SYM LEFT_BRACE (expr COMMA_SYM?)* RIGHT_BRACE {
   extends=expr
}

macroExpr ::= AT_SYM BUILTIN_FUNCTION fnCallSuffix { pin=1 }
groupedExpr ::= LEFT_PAREN expr RIGHT_PAREN
continueExpr ::= CONTINUE_KEYWORD (COLON_SYM symbol)?
integer ::= INT_LITERAL { extends=expr }
float ::= FLOAT_LITERAL { extends=expr }
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD { extends=expr }
null ::= NULL_KEYWORD { extends=expr }
char ::= CHAR_LITERAL { extends=expr }
keywordLiteral ::=
   UNDEFINED_KEYWORD
 | ERROR_KEYWORD
 | THIS_KEYWORD
 | UNREACHABLE_KEYWORD
 | SUSPEND_KEYWORD {
	extends=expr
}

errorSetExpr ::=
 ERROR_KEYWORD
 LEFT_BRACE (symbol (COMMA_SYM symbol)*)? RIGHT_BRACE {
	extends=expr
}

containerExpr ::=
 (EXTERN_KEYWORD | PACKED_KEYWORD)?
 ( STRUCT_KEYWORD groupedExpr?
 | UNION_KEYWORD (ENUM_KEYWORD groupedExpr? | groupedExpr)?
 | ENUM_KEYWORD groupedExpr?
 )
 LEFT_BRACE containerMember* RIGHT_BRACE

